using System;
using LightJson;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Linq;

namespace CodeGoat.Server
{
    /// <summary>
    /// Represents a document change
    /// Once created, the instance is immutable
    /// </summary>
    public class Change
    {
        /// <summary>
        /// Randomly generated ID during change creation on the client side
        /// </summary>
        public string Id { get; private set; }

        /// <summary>
        /// Starting position in the pre-change coordinate system
        /// </summary>
        public Location From { get; private set; }

        /// <summary>
        /// Ending position in the pre-change coordinate system
        /// </summary>
        public Location To { get; private set; }

        /// <summary>
        /// List of lines that were inserted between From and To
        /// </summary>
        public DocumentLines Text { get; private set; }

        /// <summary>
        /// List of lines that were previously between From and To and so were removed
        /// </summary>
        public DocumentLines Removed { get; private set; }

        private Change() {}

        public Change(string id, Location from, Location to, string text, string removed)
        {
            this.Id = id;
            this.From = from;
            this.To = to;
            this.Text = new DocumentLines(text);
            this.Removed = new DocumentLines(removed);
        }

        /// <summary>
        /// Creates a change instance from a json object in a given document context
        /// </summary>
        /// <param name="obj">Json object returned by the codemirror editor</param>
        /// <param name="id">Id of the change assigned during creation</param>
        /// <param name="doc">Document for Location sanitization</param>
        public static Change FromCodemirrorJson(JsonObject obj, Document doc = null)
        {
            return new Change {
                Id = obj["id"].AsString, // this field is added by the client side, it's not generated by codemirror
                From = Location.FromCodemirrorJson(obj["from"].AsJsonObject, doc),
                To = Location.FromCodemirrorJson(obj["to"].AsJsonObject, doc),
                Text = new DocumentLines(obj["text"].AsJsonArray),
                Removed = new DocumentLines(obj["removed"].AsJsonArray)
            };
        }

        /// <summary>
        /// Converts this change into the codemirror representation of a change as a json object
        /// </summary>
        public JsonObject ToCodemirrorJson()
        {
            return new JsonObject()
                .Add("id", Id) // this field is added by the client side, it's not generated by codemirror
                .Add("from", From.ToCodemirrorJson())
                .Add("to", To.ToCodemirrorJson())
                .Add("text", Text.ToJsonArray())
                .Add("removed", Removed.ToJsonArray());
        }

        /// <summary>
        /// Tracks where this change moves when another change is applied before this one
        /// </summary>
        /// <param name="change">Another change (the older one)</param>
        /// <returns>This change after the motion has been applied</returns>
        public Change UpdateLocationByChange(Change change)
        {
            return new Change {
                Id = Id,
                From = From.UpdateByChange(change),
                To = To.UpdateByChange(change),
                Text = Text,
                Removed = Removed // NOTE: this value stops being correct here
            };
        }
    }
}
